// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace UP_Ilya.Models;

public partial class TV_ProgramContext : DbContext
{
    public TV_ProgramContext()
    {
    }

    public TV_ProgramContext(DbContextOptions<TV_ProgramContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Company> Companies { get; set; }

    public virtual DbSet<TV_Show> TV_Shows { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserShow> UserShows { get; set; }

    public virtual DbSet<Watcher> Watchers { get; set; }

    public virtual DbSet<Watcher_TV_Show> Watcher_TV_Shows { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=DESKTOP-N7MIDVG\\SQLEXPRESS;Initial Catalog=TV_Program;Integrated Security=True;Encrypt=True;TrustServerCertificate=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Company>(entity =>
        {
            entity.HasKey(e => e.CompanyID).HasName("PK__Company__2D971C4CA438FBB4");

            entity.ToTable("Company");

            entity.Property(e => e.CompanyName)
                .IsRequired()
                .HasMaxLength(200)
                .IsFixedLength();
            entity.Property(e => e.CompanyPhone)
                .IsRequired()
                .HasMaxLength(12)
                .IsFixedLength();
        });

        modelBuilder.Entity<TV_Show>(entity =>
        {
            entity.HasKey(e => e.TVShowID).HasName("PK__TV_Show__150F237E86945353");

            entity.ToTable("TV_Show");

            entity.Property(e => e.AgeRating)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.TVShowName)
                .IsRequired()
                .HasMaxLength(200)
                .IsFixedLength();

            entity.HasOne(d => d.Company).WithMany(p => p.TV_Shows)
                .HasForeignKey(d => d.CompanyID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TV_Show_Company");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserID).HasName("PK__Users__1788CCAC41B99B86");

            entity.Property(e => e.UserMail)
                .IsRequired()
                .HasMaxLength(200)
                .IsFixedLength();
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(200)
                .IsFixedLength();
            entity.Property(e => e.UserPass)
                .IsRequired()
                .HasMaxLength(200)
                .IsFixedLength();
            entity.Property(e => e.UserRole)
                .IsRequired()
                .HasMaxLength(200)
                .IsFixedLength();
        });

        modelBuilder.Entity<UserShow>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("UserShows");

            entity.Property(e => e.TVShowName)
                .IsRequired()
                .HasMaxLength(200)
                .IsFixedLength();
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(200)
                .IsFixedLength();
            entity.Property(e => e.UserRole)
                .IsRequired()
                .HasMaxLength(200)
                .IsFixedLength();
        });

        modelBuilder.Entity<Watcher>(entity =>
        {
            entity.HasKey(e => e.WatcherID).HasName("PK__Watcher__D746D1115020377C");

            entity.ToTable("Watcher");

            entity.Property(e => e.PersonalData)
                .IsRequired()
                .HasMaxLength(200)
                .IsFixedLength();

            entity.HasOne(d => d.User).WithMany(p => p.Watchers)
                .HasForeignKey(d => d.UserID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Watcher_Users");
        });

        modelBuilder.Entity<Watcher_TV_Show>(entity =>
        {
            entity.HasKey(e => e.WatcherTVShowID).HasName("PK__Watcher___291AD61F5ED6D464");

            entity.ToTable("Watcher_TV_Show");

            entity.HasOne(d => d.TVShow).WithMany(p => p.Watcher_TV_Shows)
                .HasForeignKey(d => d.TVShowID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Watcher_TV_Show_TV_Show");

            entity.HasOne(d => d.Watcher).WithMany(p => p.Watcher_TV_Shows)
                .HasForeignKey(d => d.WatcherID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Watcher_TV_Show_Watcher");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}